<?xml version='1.0'?>
<testExecutions version='1'>
    <file path='src/app/intermedio/espias/medicos.component.spec.ts'>
        <testCase name='MedicosComponent Se agrega un medico' duration='6'/>
        <testCase name='MedicosComponent Init: Debe cargar los médicos' duration='2'/>
        <testCase name='MedicosComponent Si falla agregarMedico, la propiedad mensajeError, debe ser igual al error' duration='4'/>
        <testCase name='MedicosComponent El metodo agregar es llamado' duration='2'/>
        <testCase name='MedicosComponent Se llama al servicio para borrar un médico' duration='3'/>
    </file>
    <file path='src/app/intermedio/formularios/formulario.spec.ts'>
        <testCase name='Formularios El campo email es obligatorio' duration='7'/>
        <testCase name='Formularios Se debe crear un formulario con dos campos, email y password' duration='1'/>
        <testCase name='Formularios El campo email debe ser valido' duration='1'/>
    </file>
    <file path='src/app/TBasicas/clases/clase.spec.ts'>
        <testCase name='Pruebas de clases Debe retornar 80 hp, si el fuboilista recibe 20 de danio' duration='0'/>
        <testCase name='Pruebas de clases Debe retornar 70 hp, si el fuboilista recibe 50 de danio' duration='1'/>
        <testCase name='Pruebas de clases Debe retornar 0 hp, si el fuboilista recibe 100 de danio o más' duration='0'/>
    </file>
    <file path='src/app/app.component.spec.ts'>
        <testCase name='AppComponent should have as title &apos;testing&apos;' duration='183'/>
        <testCase name='AppComponent should render title' duration='36'/>
        <testCase name='AppComponent should create the app' duration='20'/>
    </file>
    <file path='src/app/TBasicas/string/string.spec.ts'>
        <testCase name='Pruebas básicas de String Debe contener  la dirección' duration='1'/>
        <testCase name='Pruebas básicas de String Debe regresar un String' duration='2'/>
    </file>
    <file path='src/app/intermedio/eventEmitter/futbolista2.spec.ts'>
        <testCase name='Fubolista 2 Emit Debe emitir un evento cuando recibe danio' duration='1'/>
        <testCase name='Fubolista 2 Emit Debe emitir un evento cuando recibe danio y sobrevivir si es menor de 100' duration='1'/>
    </file>
    <file path='src/app/TBasicas/booleanos/booleanos.spec.ts'>
        <testCase name='Pruebas básicas de Booleanos Debe regresar true' duration='1'/>
    </file>
    <file path='src/app/TBasicas/arreglos/arrreglos.spec.ts'>
        <testCase name='Pruebas de arreglos Debe retornar al menos 3 peliculas' duration='4'/>
        <testCase name='Pruebas de arreglos Debe existir  SuperMan y Nemo' duration='1'/>
    </file>
    <file path='src/app/TBasicas/numeros/numeros.spec.ts'>
        <testCase name='Pruebas básicas de números Debe retornar 300, si el nro ingresado es mayor a 300' duration='3'/>
        <testCase name='Pruebas básicas de números Debe retornar el nro ingresado +1, si el nro ingresado no es mayor a 300' duration='1'/>
    </file>
</testExecutions>